<?xml version="1.0"?>
<!DOCTYPE flagsdescription
SYSTEM "http://www.spec.org/dtd/cpuflags2.dtd"
>

<flagsdescription>

   <filename>Example-VisualStudio</filename>

   <title>SPEC CPU(R) 2017 Visual Studio 2015/2017 C/C++ Compiler Flags</title>

   <header>
      <![CDATA[
      <h2>Flag descriptions for Compilers: Microsoft Visual Studio 2015/2017</h2>
      <p>SPEC CPU results provide brief summaries of compiler flags that are used when benchmarks are compiled. Such
         summaries are based on the descriptions provided by Microsoft, for example at page <a
            href="https://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx">https://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx</a>,
         "Compiler Options Listed Alphabetically: Visual Studio 2015".</p>
      <p>The original descriptions at microsoft.com are <b>copyrighted by Microsoft</b>, and they should be referenced in
         case of questions, or when more detail is needed.  </p>
      ]]>
   </header>

   <!-- *********************** Compilers ******************************************** -->

   <flag
      name="cc"
      class="compiler"
      regexp="(?:[/\\]\S+[/\\])?cl\b">
      <example>cl</example>
      <![CDATA[
      <p>
         Invoke the command-line version of the Microsoft C++ compiler.
      </p>
      ]]>
   </flag>

   <flag
      name="link"
      class="compiler"
      regexp="(?:[/\\]\S+[/\\])?link\b">
      <example>link</example>
      <![CDATA[
      <p>
         Invoke the command-line version of the Microsoft linker.
      </p>
      ]]>
   </flag>

   <!-- *********************** Portability ******************************************** -->

   <flag name="no-wchar_t-native"
      class="portability"
      regexp="[/-]Zc:wchar_t-(?=\s|$)">
      <example>/Zc:wchar_t-</example>
      <![CDATA[
      This flag causes the compiler to not recognize wchar_t as a native type.
      ]]>
   </flag>

   <flag name="restrict" 
      class="portability" 
      regexp="-Drestrict=__restrict(?=\s|$)">
      <![CDATA[
      <p>If the C99 keyword <tt>restrict</tt> is found, substitute Visual Studio spelling
         <tt>__restrict</tt>.</p>
      ]]>
   </flag>

   <flag name="shell32_lib"
      class="portability"
      regexp="shell32.lib(?=\s|$)">
      <![CDATA[
      <p>The shell32 link library. Used for 526.blender_r portability</p>
      ]]>
   </flag>

   <flag name="advapi32_lib"
      class="portability"
      regexp="advapi32.lib(?=\s|$)">
      <![CDATA[
      <p>The advapi32 link library. Used for 526.blender_r portability</p>
      ]]>
   </flag>

   <flag name="user32_lib"
      class="portability"
      regexp="user32.lib(?=\s|$)">
      <![CDATA[
      <p>The user32 link library. Used for 526.blender_r portability</p>
      ]]>
   </flag>

   <!-- *********************** Optimization ******************************************** -->
   <!-- Please keep in alphabetical order (of the option as seen by compiler *user*), without regard to preceding punctuation -->

   <flag name="arch"
      class="optimization"
      regexp="[/-]arch:(?:SSE|SSE2|AVX|AVX2)(?=\s|$)">
      <example>/arch:option</example>
      <![CDATA[
      <p style="margin-bottom:.1em;">Specify code generation architecture.  Options valid for x64 and x86:</p>
      <ul style="margin-top:.1em;">
         <li>AVX Enables the use of Avanced Vector Extensions instructions.</li>
         <li>AVX2 Enables the use of 2nd generation AVX instructions.</li>
      </ul>
      <p style="margin-bottom:.1em;">Options valid for x86:</p>
      <ul style="margin-top:.1em;">
         <li>IA32 Specifies no SIMD instructions, uses x87 for floating-point calculations.</li>
         <li>SSE Enables the use of Streaming SIMD (Single Instruction, Multiple Data).</li>
         <li>SSE2 Enables the use of 2nd generation SSE. (default for x86)</li>
      </ul>
      ]]>
   </flag>

   <flag name="EHsc"
      class="optimization"
      >
      <![CDATA[
      <p>Specifies the model of exception handling to be used by the compiler, allowing some to be optimized away.  The <tt>sc</tt>
         option catches C++ exceptions, and allows the compiler to assume that <tt>extern C</tt> functions do not throw C++
         exceptions.  Note that SPEC CPU 2017 <a
            href="https://www.spec.org/auto/cpu2017/Docs/runrules.html#rule_2.3.2">rule&nbsp;2.3.2</a> requires that
         exceptions be handled in base.  </p>
      ]]>
   </flag>

   <flag name="stacksize"
      class="optimization"
      regexp="[-/]F\d+">
      <example>Fstacksize</example>
      <![CDATA[
      <p>Set the stack size, in bytes. </p>
      ]]>
   </flag>

   <flag name="favor"
      class="optimization"
      regexp="[/-]favor:(?:blend|AMD64|INTEL64)(?=\s|$)">
      <example>/favor:option</example>
      <![CDATA[
      <p style="margin-bottom:.1em;">Produce code that is optimized for the noted processors (while still being capable of
         running on all x64 platforms):</p> 
      <ul style="margin-top:.1em;">
         <li><b>AMD64:</b> AMD Opteron and Athlon processors.</li>
         <li><b>INTEL64:</b> Intel processors.</li> 
         <li><b>blend:</b> designed to give the best performance across a broad range of x64 processors.</li>
      </ul>
      ]]>
   </flag>

   <flag name="GF"
      class="optimization">
      <![CDATA[
      Create a single copy of identical strings in the program.
      ]]>
   </flag>

   <flag name="GL"
      class="optimization">
      <![CDATA[
      <p>Enables whole program optimization, including:</p>
      <ul>
         <li>Optimize the use of registers across function boundaries.</li>
         <li>Reduce loads and stores.</li>
         <li>Improve inlining.</li>
      </ul>
      ]]>
   </flag>

   <flag name="Gs"
      class="optimization"
      regexp="[/-]Gs\d*\b">
      <example>/Gs[size]</example>
      <![CDATA[
      <p>Stack probes - this option is included with /O2, to control stack growth for function calls.</p>
      ]]>
   </flag>

   <flag name="GS"
      class="optimization"
      regexp="[/-]GS-?">
      <example>/GS or /GS-</example>
      <![CDATA[
      <p>Enables (/GS) or disables (/GS-) detection of some buffer overruns.</p>
      ]]>
   </flag>

   <flag name="Gy"
      class="optimization">
      <![CDATA[
      Enable function-level linking.
      ]]>
   </flag>

   <flag name="O2"
      class="optimization">
      <![CDATA[
      <p>Creates the fastest code in the majority of cases (on by default).</p>
      ]]>
      <include flag="Og" />
      <include flag="Oi" />
      <include flag="Ot" />
      <include flag="Oy" />
      <include flag="Ob2" />
      <include flag="Gs" />
      <include flag="GF" />
      <include flag="Gy" />
   </flag>

   <flag name="Ob2"
      class="optimization"
      >
      <![CDATA[
      <p>Specifies the level of inline function expansion.  When /Ob2 (the default) is in effect, the compiler can choose to inline at its discretion.</p>
      ]]>
   </flag>

   <flag name="Og"
      class="optimization">
      <![CDATA[
      <p>Provides local and global optimizations, automatic-register allocation, and loop optimization.</p>
      ]]>
   </flag>

   <flag name="Oi"
      class="optimization">
      <![CDATA[
      <p>Replaces some function calls with intrinsic or otherwise special forms of
         the function that have increased performance.</p>
      <p>The intrinsic floating-point functions have different
         exception handling and boundary conditions than the library routines with
         the same name, including loss of _matherr and errno functionality and 
         therefore loss of ANSI conformance. However, the intrinsic forms can
         considerably speed up floating-point-intensive programs.</p>
      <p>SPEC CPU has traditionally allowed compilers to perform this optimization, even in base.</p>
      ]]>
   </flag>

   <flag name="openmp"
      class="optimization"
      parallel="yes"
      >
      <![CDATA[
      <p>Enable support for OpenMP, including #pragmaomp.</p>
      ]]>
   </flag>

   <flag name="Ot"
      class="optimization">
      <![CDATA[
      Favor speed over size. 
      ]]>
   </flag>

   <flag name="Oy"
      class="optimization">
      <![CDATA[
      Speed up function calls by omitting frame pointers.
      ]]>
   </flag>

   <flag name="Qpar"
      class="optimization"
      parallel="yes"
      >
      <![CDATA[
      Enable Auto-Parallelization, to spread loops across multiple processing units.
      ]]>
   </flag>

   <flag name="TP"
      class="other"
      >
      <![CDATA[
      Treat all source files as C++, regardless of their file extensions.
      ]]>
   </flag>

   <flag name="TC"
      class="other"
      >
      <![CDATA[
      Treat all source files as C, regardless of their file extensions.
      ]]>
   </flag>

   <flag name="Zi" class="optimization">
      Include debug symbols
   </flag>

</flagsdescription>
