#!/usr/bin/perl

# add_new_benchmark -  Handle details of adding a completely new benchmark to
#   the harness.  Looks for common mistakes (like not renaming docs, leaving
#   generated files in, etc), fixes them, makes the necessary adjustments to
#   the tools, and checks it all in to Subversion with correct properties set.
#
#  Copyright 2009-2016 Standard Performance Evaluation Corporation
#
#  Author: Cloyce D. Spradling
#
# $Id: add_new_benchmark 4698 2016-07-28 20:23:52Z CloyceS $

BEGIN {
    if ($ENV{'SPEC'} ne '') {
        unshift @INC, "$ENV{SPEC}/bin/common"; # Shouldn't be necessary now
        require "vars_common.pl";
        die "The SPEC environment variable is not set correctly.\nStopped" unless $::suite ne '';
        $::fullsuite = $::suite;
        $::suite = $::suitebase;
        chdir $ENV{'SPEC'}.'/benchspec/'.$::fullsuite;
    } else {
        die "The SPEC environment variable is not set.\n";
    }
}

use strict;
use IO::File;
use File::Glob;
use File::Copy;
use File::Basename;
use File::Find;
use Getopt::Long;

my $stdkeywords = 'Author Date Id Revision LastChangedRevision';
my %ignore = ();
my %keywords = ();
my %mimetype = ();
my %eol = ();
my %misc_props = ();

my $default_bs = $::suite;

my %opts = ( 'clone' => undef,
             'check' => 0
           );
my $rc = GetOptions(\%opts, qw(
                               clone!
                               check!
                              ));
die "GetOptions failed\n" unless $rc;

my $bm = shift(@ARGV);
my $benchset = shift(@ARGV) || $default_bs;

my ($num, $name, $barename) = '';

# Figure out which benchset file the new benchmark will go in
my $bs_file = '';
foreach my $try ($benchset, $benchset.$::year,
                 'C'.$benchset, 'C'.$benchset.$::year) {
    if (-f $try.'.bset') {
        $bs_file = $try.'.bset';
        last;
    } elsif (-f uc($try).'.bset') {
        $bs_file = uc($try).'.bset';
        $benchset = uc($benchset);
        last;
    }
}
die "Can't find benchset file for '$benchset'\n" unless $bs_file ne '';
print "Benchmark list for $benchset is in $bs_file.\n";

if ($bm eq '') {
    die "Provide the benchmark number.name, please.\n";
} else {
    if ($bm =~ /^(\d{3})\.(\S{1,9})(.*)/) {
        ($num, $name) = ($1, $2);
        my $rest = $3;
        if ($::suite =~ /^(OMP|ACCEL|CPU)/) {
            $name .= $rest;
        } elsif ($rest ne '') {
            die "Benchmark name '$name' is too long; must be 9 characters or less.\n";
        }
        $barename = $name;
        if ($::suite =~ /CPU/) {
            $barename =~ s/_[rs]$//;
            $barename =~ s/^o// if $num >= 200 && $num < 300;
        }
    } else {
        die "Expecting num.name; num must be 3 digits, and name must be 9 chars or less\n";
    }
}
if (! -d $bm) {
    die "There is no benchmark in benchspec/$::fullsuite/$bm\n";
}
if (svncheck($bm) && $opts{'check'} == 0 ) {
    warn "$bm is already in Subversion!\n";
    if (!ask("Continue anyway?")) {
      exit 1;
    }
    $opts{'svn'} = 1;
} else {
    $opts{'svn'} = 0;
}

# Load the benchmark config
eval "package BM; do '$bm/Spec/object.pm';";
die "Couldn't load benchmark config: $@\n" if ($@ ne '');
my $benchlang = determine_overall_benchlang($bm);
print "Benchmark: $bm ($num . '$name'; lang is '$benchlang') will be put into $benchset\n";

if ($num != $BM::benchnum || $name ne $BM::benchname) {
    die "\nBenchmark name/number is not configured correctly in object.pm.\nobject.pm says $BM::benchnum.$BM::benchname; should be $num.$name\n";
}

if (defined($BM::sources) && $BM::sources ne '') {
    # It's cloned from another benchmark; set $opts{'clone'} if the user didn't
    $opts{'clone'} = 1 unless defined($opts{'clone'});
    $opts{'cloned_from'} = $BM::sources;
    my $fh = new IO::File '>'.$bm.'/Spec/origin';
    die "Couldn't open $bm/Spec/origin for writing: $!\nStopped" unless defined($fh);
    $fh->print($BM::sources."\n");
    $fh->close();
} else {
    $opts{'clone'} = 0 unless defined($opts{'clone'});
    $opts{'cloned_from'} = '';
}

my $tmp = '';
if ($opts{'clone'}) {
    # Cloned benchmarks get their flags file from the parent
    add_ignore("$bm/Spec", 'flags.xml');
    # Docs, too
    add_ignore($bm, 'Docs');

} else{
    if (! -f "$bm/Spec/flags.xml") {
        die "The benchmark flags file ($bm/Spec/flags.xml) is missing!\n";
    }
    $tmp = qx{specrxp -Vs $bm/Spec/flags.xml};
    if ($? != 0) {
        die "The benchmark flags file could not be validated! RXP output:\n$tmp\n";
    }
    $keywords{"$bm/Spec/flags.xml"} = $stdkeywords;
    $eol{"$bm/Spec/flags.xml"} = 'native';
    $mimetype{"$bm/Spec/flags.xml"} = 'text/xml';
    print "Flags file validates\n";
}
add_ignore("$bm/Docs", 'flags.html');

my $no_docs = 0;
if ( -f "$bm/Docs/$barename.html" ) {
    $keywords{"$bm/Docs/$barename.html"} = $stdkeywords;
    $eol{"$bm/Docs/$barename.html"} = 'native';
    add_ignore("$bm/Docs", "$bm.html");
} elsif ($opts{'clone'} == 0) {
    $no_docs = 1;
}

# Grunt work

# 0. Set permissions so that files can be removed or changed as necessary
# It's quick and dirty with find
system "find $bm -type d -print | xargs chmod 775";
system "find $bm -type f -print | xargs chmod u+rw,go+r";

# 1. Clean up build or run leftovers
system 'rm', '-rf', "$bm/run", "$bm/exe", "$bm/build";
add_ignore($bm, qw(build exe run));

# 2. Check docs
my @olddocs = glob "$bm/Docs/[0-9][0-9][0-9].${barename}*.html";
my @oldtext = map { my $t = $_; $t =~ s/\.html/\.txt/; $t } @olddocs;
if (@olddocs) {
  warn "Found potentially mismatched documentation files:\n   ".join("\n   ", @olddocs)."\n";
  if ($no_docs == 0) {
      if (ask("Nuke them?")) {
          system 'rm', '-f', @olddocs;
      }
  } else {
      if (ask("Try to \"update\" them?")) {
          @olddocs = update_docs($bm, $barename, @olddocs);
      } else {
          die "Old docs found and no new docs are present.\n";
      }
  }
  foreach $tmp (@olddocs) {
      $eol{$tmp} = 'native';      # They're HTML, after all
  }
} elsif ($no_docs) {
  die "Benchmark description is missing!\n";
}

# 3. Remove auto-generated versions of docs
if ($opts{'check'} == 0) {
    @oldtext = map { my $t = $_; $t =~ s/\.html/\.txt/; $t } @olddocs;
    push @oldtext, "$bm/Docs/flags.html", "$bm/Docs/$bm.txt", "$bm/Docs/$bm.html";
    system 'rm', '-f', @oldtext;
    add_ignore("$bm/Docs", @oldtext);
}

# 4. Remove objects, etc from src directory
@::badfiles = ();
sub bad_sources {
  push @::badfiles, $File::Find::name if (/\.(?:o|obj|exe|a|lib|so|pdb|orig|rej|dSYM)$/ || $_ eq $BM::exename);
}
find(\&bad_sources, "$bm/src");
if (@::badfiles) {
    print "I would be " if $opts{'check'};
    print "Removing non-source files from src:\n  ".join("\n  ", @::badfiles)."\n";
    if ($opts{'check'} == 0) {
        my $count = unlink @::badfiles;
        die "Not all bad files could be removed: $!\n" if ($count != @::badfiles);
    }
}

# 5. Check workloads for reftime and refpower files and at least one of
#    'input' or 'output'
if ($opts{'clone'} == 0 || -d "$bm/data" ) {
    my @workloads = sort by_workload glob "$bm/data/*";
    my $all_outputs = 0;
    foreach my $workload (@workloads) {
        if (!-d $workload) {
            die "Non-directory found in $bm/data: $workload\n" unless ($workload =~ /ref(?:time|power)$/);
        }

        # Check for reftime and refpower files
        foreach my $reffile (qw(reftime refpower)) {
            if ($workload !~ m#/all$#) {
                if (!-f "$workload/$reffile" && $workload !~ m#/all$#) {
                    if ($opts{'check'}) {
                        warn "No $reffile file found in $workload; would make one up\n";
                    } else {
                        warn "No $reffile file found in $workload -- making one up!\n";
                        my ($where) = ($workload =~ m#/([^/]+)$#);
                        if ($where !~ /(ref|test|train)$/) {
                            die "Can't figure out workload class from directory name ($where does not end with 'test', 'train', or 'ref')!\nCreate $workload/$reffile file manually.\n";
                        }
                        my $tmp = $where;
                        # 1 is a special value in reftime and refpower files
                        my $tmpval = ($reffile eq 'reftime') ? 2.0 : 1000;
                        $tmp .= " $1" unless ($1 eq $where || $reffile ne 'reftime');
                        my $fh = new IO::File ">$workload/$reffile";
                        die "Couldn't open $workload/$reffile for writing: $!\n" unless defined($fh);
                        $fh->print("$tmp\n$tmpval\n");
                        $fh->close();
                    }
                } else {
                    my $fh = new IO::File "<$workload/$reffile";
                    my $tmp = <$fh>;
                    if ($tmp !~ /(?:^|\s)(test|train|ref)$/) {
                        die "The workload class on the first line of $workload/$reffile must be 'test',\n'train', or 'ref'.";
                    }
                    chomp($tmp = <$fh>);
                    if ($tmp + 0 <= 1) {
                        die "The value on the second line of $workload/$reffile must be a positive\nnumber greater than 1.\n";
                    }
                    $fh->close();
                }
            }
        }

        # Check for presence of input/output directories.  If both are missing
        # the tools will report that the benchmark does not support that workload
        if (!-d "$workload/input" && !-d "$workload/output") {
            if ($opts{'check'}) {
                warn "Neither input nor output directories found in $workload; would make them\n";
            } else {
                warn "Neither input nor output directories found in $workload -- making them!\n";
                mkdir "$workload/input", 0777 || die "Couldn't create '$workload/input': $!\n";
                if ($workload !~ m#/all$#) {
                    mkdir "$workload/output", 0777 || die "Couldn't create '$workload/output': $!\n";
                }
            }
        }

        # Check for presence of files in the output directory.  If the 'all'
        # directory has output files, it's not necesary to have one per
        # workload.
        if (-d "$workload/output" && $all_outputs == 0) {
            my @files = glob "$workload/output/*";
            if (@files > 0) {
                $all_outputs = @files+0 if ($workload =~ m#/all$#);
            } elsif ($workload !~ m#/all$#) {
                if ($opts{'check'}) {
                    warn "No output files in $workload; would make one up\n";
                } else {
                    warn "No output files in $workload!  Making one for now...\n";
                    my $fh = new IO::File ">$workload/output/dummy";
                    if (defined($fh)) {
                        $fh->print("Guaranteed to fail!\n");
                        $fh->close();
                    } else {
                        die "Couldn't open $workload/output/dummy for writing: $!\n";
                    }
                }
            }
        }

        # Check to see that the reftime and refpower files which are present
        # are correct
        foreach my $reffile (qw(reftime refpower)) {
            if ($workload !~ m#/all$#) {
                my $fh = new IO::File "<$workload/$reffile";
                die "Couldn't open $workload/$reffile for reading: $!\n" unless defined($fh);
                $tmp = <$fh>;
                chomp($tmp);
                my ($size, $class) = split(/\s+/, $tmp);
                $class = $size unless $class ne '';
                if ($class !~ /^(?:ref|test|train)$/) {
                    die "Bad workload class ($class) in $workload/$reffile; needs to be test, train, or ref!\n";
                }
                $tmp = <$fh>;
                chomp($tmp);
                if ($tmp !~ /^\d+(?:\.\d+)?$/) {
                    die "Value listed ($tmp) in $workload/$reffile isn't a proper number!\n";
                }
                $fh->close();
            }
        }
    }
}

if ($opts{'check'}) {
    print "ERROR: Missing version.txt file\n" unless -f "$bm/version.txt";
    print "ERROR: Benchmark not listed in benchsets\n" unless update_benchset_list($bs_file, $bm, 1);
    print "Check completed\n\n";
    exit;
}

# 6. Set up the version.txt file
unlink "$bm/version" if -f "$bm/version";
copy("../../version.txt", "$bm/version.txt");
$eol{"$bm/version.txt"} = 'native';
$mimetype{"$bm/version.txt"} = 'text/plain';
delete $keywords{"$bm/version.txt"};

# 7. Set props for various files
if ($opts{'clone'} == 0 || -d "$bm/src") {
    die "No src/ directory!\n" unless -d "$bm/src";
    foreach my $srcfile (deep_read_dir("$bm/src")) {
        $eol{$srcfile} = 'native';
        delete $keywords{$srcfile}; # Don't want to mess up author's tags
    }
    $keywords{"$bm/src/Makefile"} = $stdkeywords;
    $eol{"$bm/src/Makefile"} = 'LF';
}
foreach my $docfile (glob "$bm/Docs/*html") {
    $eol{$docfile} = 'native';
    $mimetype{$docfile} = 'text/html';
}
$eol{"$bm/Spec/object.pm"} = 'native';
$keywords{"$bm/Spec/object.pm"} = $stdkeywords;

# 8. Add everything to Subversion
if (svncheck(dirname($bm))) {

    $tmp = qx{svn add $bm};
    die "'svn add' failed:\n$tmp\n" if ($? != 0 && !svncheck($bm));

    # 9. Set all the props
    # EOL styles
    foreach my $file (sort keys %eol) {
        svn_propset('svn:eol-style', $eol{$file}, $file);
    }
    # MIME types
    foreach my $file (sort keys %mimetype) {
        svn_propset('svn:mime-type', $mimetype{$file}, $file);
    }
    # Keyword replacement
    foreach my $file (sort keys %keywords) {
        svn_propset('svn:keywords', $keywords{$file}, $file);
    }
    # Ignores
    foreach my $dir (sort keys %ignore) {
        if (!-d $dir) {
            next unless -e $dir;  # Skip if the target just doesn't exist
            die "Can't set ignore properties on non-directories; '$dir' isn't!\n";
        }
        # Erase to-be-ignored files
        foreach my $file (uniq_basename(@{$ignore{$dir}})) {
            if (-e "$dir/$file") {
                system "svn rm $dir/$file 2>/dev/null || rm -rf $dir/$file";
            }
        }
        svn_propset('svn:ignore', join("\n", uniq_basename(@{$ignore{$dir}})), $dir);
    }
    # Everything else
    foreach my $prop (sort keys %misc_props) {
        foreach my $file (sort keys %{$misc_props{$prop}}) {
            svn_propset($prop, $misc_props{$prop}->{$file}, $file);
        }
    }

} else {
    print "Not a Subversion working tree; skipping 'svn add' and friends\n";
}

# 10. Update the files elsewhere in the suite that need it
update_benchset_list($bs_file, $bm);

sub uniq_basename {
    my (@paths) = @_;
    my %names = map { basename($_) => 1 } @paths;

    return sort keys %names;
}

sub svn_propset {
    my ($prop, $value, @targets) = @_;

    system 'svn', 'propset', $prop, $value, @targets;
    die "'svn propset' failed for $prop on ".join(',', @targets)."\n" if ($? != 0);
}

sub add_ignore {
    my ($dir, @files) = @_;

    if (!exists($ignore{$dir}) || !defined($ignore{$dir})) {
        # Get the existing value (if any)
        my $tmp = qx{svn pg svn:ignore $dir};
        if ($? == 0) {
            $ignore{$dir} = [ grep { $_ ne '' } split(/\n/, $tmp) ];
        }
    }
    push @{$ignore{$dir}}, @files;
}

sub update_docs {
    my ($bm, $barename, @olddocs) = @_;
    my $newfile = "$bm/Docs/$barename.html";
    $eol{$newfile} = 'native';
    $keywords{$newfile} = $stdkeywords;

    @olddocs = sort { $b cmp $a } @olddocs; # lexical is okay

    # Attempt to only update the "newest" one
    my $oldfile = shift(@olddocs);
    my ($oldname) = ($oldfile =~ m#/([^/]+)\.html$#);
    my $ifh = new IO::File '<'.$oldfile;
    if (!defined($ifh)) {
        die "Couldn't open $oldfile for reading: $!\n";
    }
    my $ofh = new IO::File '>'.$newfile;
    if (!defined($ofh)) {
        die "Couldn't open $newfile for writing: $!\n";
    }
    push @olddocs, $newfile;
    while(defined(my $line = <$ifh>)) {
        $line =~ s/(?:CPU2017|OMP2012|MPI2007|ACCEL|HANDHELDv1)/$::fullsuite/gi;
        $line =~ s/\Q$oldname\E/$bm/gi;
        $line =~ s/Last updated:[^<]+/Last updated: \$Date\$/i;
        $ofh->print($line);
    }
    $ifh->close();
    $ofh->close();
    system 'svn', 'rm', $oldfile;
    system 'rm', '-f', $oldfile;
    $oldfile =~ s/\.html/\.txt/;
    system 'rm', '-f', $oldfile;

    return @olddocs;
}

sub update_benchset_list {
    my ($bs_file, $benchmark, $check) = @_;
    my $newline = $benchmark."\n";
    my $contents = '';
    my $prefix = '';

    my $fh = new IO::File '<'.$bs_file;
    my $bmlist = 0;
    while(defined(my $line = <$fh>)) {
        if ($bmlist == 0) {
            $contents .= $line;
            $bmlist = 1 if ($line =~ /\@benchmarks =/);
        } elsif ($line =~ /^(\s+)(\d{3}\.\S+)/) {
            my ($ws, $curbm) = ($1, $2);
            if (defined($prefix) && $prefix eq '' && $ws ne '') {
                $prefix = undef;
                $newline = $ws.$newline;
            }
            if ($newline eq $line || $benchmark eq $curbm) {
                # It's already in there, so we can just tquit
                return 1;
            } elsif (($newline cmp $line) < 0) {
                print "Inserting $benchmark before $2 in benchset\n" unless $check;
                $contents .= $newline;
                $newline = '';
                $bmlist = 0;
            }
            $contents .= $line;
        } elsif ($line =~ m#\);#) {
            $bmlist = 0;
            if ($newline ne '') {
                print "Inserting $benchmark at last position in benchset\n" unless $check;
                $contents = $newline;
                $newline = '';
            }
            $contents .= $line;
        } else {
            die "THIS shouldn't happen...\nStopped";
        }
    }
    $fh->close();

    return 0 if $check; # No need to continue if we're just checking...

    # Now rewrite the benchset file
    $fh = new IO::File '>'.$bs_file;
    die "Couldn't open $bs_file for writing: $!\n" unless defined($fh);
    $fh->print($contents);
    $fh->close();
}

sub determine_overall_benchlang {
    my ($bm) = @_;

    # Check to see that CXX is listed first in benchlangs in which it appears
    check_cxx_position($bm, 'default' => $BM::benchlang, %BM::benchlang);

    if (defined($BM::benchlang) && $BM::benchlang ne '') {
        # Scalar; easy
        return $BM::benchlang;
    } else {
        my @langs = map { $BM::benchlang{$_} } keys %BM::benchlang;
        @langs = sort { length($b) <=> length($a) } @langs;
        if ($langs[0] ne '') {
            return $langs[0]; # Longest == most languages == the one we want
        } else {
            die "Couldn't determine benchlang for $bm\n";
        }
    }
}

sub check_cxx_position {
    # If CXX isn't listed first, then linkage will fail on the mangled C++
    # names.
    my ($bm, %langs) = @_;
    my $do_die = 0;

    foreach my $binary (sort keys %langs) {
        if ($langs{$binary} =~ /CXX/ && $langs{$binary} !~ /^CXX/) {
            print STDERR "Language for '$binary' must list CXX first; currently $langs{$binary}\n";
            $do_die = 1;
        }
    }
    die "Benchlang needs to be fixed for $bm\n" if $do_die;

}

sub ask {
    my ($q) = @_;

    print "$q (y/n) ";
    my $answer = <>;
    if ($answer =~ /^y/i) {
        return 1;
    }
    return 0;
}

sub deep_read_dir {
    my ($top) = @_;

    return () unless -d $top;

    my @files = ();

    foreach my $file (glob "$top/*") {
        if (-d $file) {
            push @files, deep_read_dir($file);
        } else {
            push @files, $file;
        }
    }

    return @files;
}

sub by_workload {
  # Lexically sort workload list, except for all, which must come first
  return -1 if $a =~ m#/all$#;
  return 1 if $b =~ m#/all$#;
  return $a cmp $b;
}

sub svncheck {
  my ($dir) = @_;

  return 1 if -d "$dir/.svn";    # Pre-1.7
  my $tmp = qx{svn info $dir >/dev/null 2>&1};
  return $? == 0;
}

# Editor settings: (please leave this at the end of the file)
# vim: set filetype=perl syntax=perl shiftwidth=4 tabstop=8 expandtab nosmarttab:
