@if not defined SPEC_BATCH_DEBUG echo off
rem
rem setspecvars.bat
rem
rem   This file sets up the paths for the SPEC tools.
rem
rem   --> DO NOT EDIT THIS FILE <--
rem
rem Author: Diego Esteves
rem
rem Copyright 2016 Standard Performance Evaluation Corporation
rem
rem $Id: setspecvars.bat 5038 2016-11-23 18:14:07Z CloyceS $
rem ---------------------------------------------------------------

rem Set LC_ALL to C.  Windows things will not pay attention to this,
rem but Perl does.  This makes regexps behave as expected, and fixes
rem regexp-related test failures on Japanese Windows.  (Presumably
rem also Chinese and anything else non-western.)
set LC_ALL=C

rem set SPEC environment variable
rem

rem if the SPEC variable is set, and it points to something that looks
rem reasonable, then use that, otherwise fall through
if defined SPEC  goto :SPEC_var_defined

rem go ahead and fetch the path, thanks to Diego.
CALL :set_short_path SPEC %CD%

:SPEC_var_defined

if not exist %SPEC%\bin\harness\runcpu (
    echo %SPEC% is not the top level directory!
    set SPEC=
    goto :DONE
)

if defined SPECPERLLIB  goto :SPECPERLIB_var_defined
set SPECPERLLIB=%SPEC%\bin\common;%SPEC%\bin\lib;%SPEC%\bin;%SPEC%\bin\lib\site

:SPECPERLIB_var_defined

echo "%PATH%" > %temp%\specpath.txt
CALL :add_path %SPEC%\bin %temp%\specpath.txt
CALL :add_path %SPEC%\bin\windows %temp%\specpath.txt
del /f /q %temp%\specpath.txt

:DONE
exit /B %errorlevel%

rem ----------------------Subroutines

:add_path
rem If the find from SFU is called, it'll spew some warnings, but the only
rem effect is that %1 will always be added to the PATH.  IOW, a fail safe.
find /I "%1" %2 > nul 2>&1
if errorlevel 1 (
    rem Not found; add it
    call :setpath "%1" "%PATH%"
) else (
    rem Check to make sure that we have not found it in a substring.
    rem This will fail for the last item in the PATH, but since we always
    rem prepend that should not be a problem.
    find /I "%1;" %2 > nul 2>&1
    if errorlevel 1 call :setpath "%1" "%PATH%"
)

goto :EOF

:setpath
  rem Strip quotes, attempt to shorten, etc.  Whatever, it works usually.
  set PATH=%~s1;%~2
goto :EOF

:set_short_path
rem Variable in %1, path in %2.  If only cmd would allow the ~ modifiers on
rem regular variables!
set %1=%~fs2
goto :EOF

rem Editor settings: (please leave this at the end of the file)
rem vim: set filetype=dosbatch syntax=dosbatch shiftwidth=4 tabstop=8 expandtab nosmarttab:
